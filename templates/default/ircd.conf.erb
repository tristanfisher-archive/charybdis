#Controlled by Chef
/* doc/example.conf - brief example configuration file
 *
 * Copyright (C) 2000-2002 Hybrid Development Team
 * Copyright (C) 2002-2005 ircd-ratbox development team
 * Copyright (C) 2005-2006 charybdis development team
 *
 * $Id: example.conf 3582 2007-11-17 21:55:48Z jilles $
 *
 * See reference.conf for more information.
 */

/* Extensions */

<%- if @extensions %>
  <% @extensions.each do |extension| -%>
  loadmodule "<%= extension %>";
  <% end -%>
<%-end %>

#loadmodule "extensions/chm_operonly_compat.so";
#loadmodule "extensions/chm_quietunreg_compat.so";
#loadmodule "extensions/chm_sslonly_compat.so";
#loadmodule "extensions/createauthonly.so";
#loadmodule "extensions/extb_account.so";
#loadmodule "extensions/extb_canjoin.so";
#loadmodule "extensions/extb_channel.so";
#loadmodule "extensions/extb_extgecos.so";
#loadmodule "extensions/extb_oper.so";
#loadmodule "extensions/extb_realname.so";
#loadmodule "extensions/extb_server.so";
#loadmodule "extensions/extb_ssl.so";
#loadmodule "extensions/hurt.so";
#loadmodule "extensions/m_findforwards.so";
#loadmodule "extensions/m_identify.so";
#loadmodule "extensions/no_oper_invis.so";
#loadmodule "extensions/sno_farconnect.so";
#loadmodule "extensions/sno_globalkline.so";
#loadmodule "extensions/sno_globaloper.so";
#loadmodule "extensions/sno_whois.so";

/*
 * IP cloaking extensions: use ip_cloaking_4.0
 * if you're linking 3.2 and later, otherwise use
 * ip_cloaking.so, for compatibility with older 3.x
 * releases.
 */

#loadmodule "extensions/ip_cloaking_4.0.so";
#loadmodule "extensions/ip_cloaking.so";

serverinfo {
	name = "<%= @server_name %>";
	sid = "<%= @sid %>";
	description = "<%= @server_description %>";
	network_name = "<%= @network_name %>";
	network_desc = "<%= @network_desc %>";
	hub = <%= @network_hub %>; #yes

	/* On multi-homed hosts you may need the following. These define
	 * the addresses we connect from to other servers. */
	/* for IPv4 */
	#vhost = "192.169.0.1";
	/* for IPv6 */
	#vhost6 = "3ffe:80e8:546::2";

	/* ssl_private_key: our ssl private key */
	/* ssl_cert: certificate for our ssl server */
	/* ssl_dh_params: DH parameters, generate with openssl dhparam -out dh.pem 1024 */
	/* ssld_count: number of ssld processes you want to start, if you
	 * have a really busy server, using N-1 where N is the number of
	 * cpu/cpu cores you have might be useful. A number greater than one
	 * can also be useful in case of bugs in ssld and because ssld needs
	 * two file descriptors per SSL connection.
	 */
	  <% if @ssl_private_key and @ssl_cert -%>
	    ssl_private_key = "<%= @ssl_private_key %>";
	    ssl_cert = "<%= @ssl_cert %>";
	    <% if @ssl_dh_params -%>
	        ssl_dh_params = "<%= @ssl_dh_params %>";
	    <% else -%>
	        /* ssl_dh_params: DH parameters, generate with openssl dhparam -out dh.pem 1024 */
	        #ssl_dh_params = "etc/dh.pem";
          #ssl_dh_params = "etc/<%= @ssl_dh_params %>";
	    <% end -%>
	    <% if @ssld_count -%>
	        ssld_count = "<%= @ssld_count %>";
	    <% else -%>
	        ssld_count = 1;
	    <% end -%>
    <% else -%>
        #ssl_private_key and ssl_cert not set in chef. if you want ssl, remedy this.
    <% end -%>

	/* default max clients: the default maximum number of clients
	 * allowed to connect.  This can be changed once ircd has started by
	 * issuing:
	 *   /quote set maxclients <limit>
	 */
   default_max_clients = "<%= @default_max_clients %>
};

admin {
	name = "<%= @admin_name  %>";
	description = "<%= @admin_description %>"
	email = "<%= @admin_email %>";
};

log {
  fname_userlog = <%= @fname_userlog %>;
  #fname_fuserlog = <%= @fname_fuserlog %>;
  fname_operlog =  <%= @fname_operlog %>;
  #fname_foperlog = <%= @fname_foperlog %>;
  fname_serverlog = <%= @fname_serverlog %>;
  #fname_klinelog = <%= @fname_klinelog %>;
  fname_killlog = <%= @fname_killlog %>;
  fname_operspylog = <%= @fname_operspylog %>;
  #fname_ioerrorlog = <%= @fname_ioerrorlog %>;
};

/* class {} blocks MUST be specified before anything that uses them.  That
 * means they must be defined before auth {} and before connect {}.
 */
class "users" {
  ping_time = <%= @users_ping_time %>;
  number_per_ident = <%= @users_number_per_ident %>;
  number_per_ip = <%= @users_number_per_ip %>;
  number_per_ip_global = <%= @users_number_per_ip_global %>;
  cidr_ipv4_bitlen = <%= @users_cidr_ipv4_bitlen %>;
  cidr_ipv6_bitlen = <%= @users_cidr_ipv6_bitlen %>;
  number_per_cidr = <%= @users_number_per_cidr %>;
  max_number = <%= @users_max_number %>;
  sendq = <%= @users_sendq %>;
};

class "opers" {
  ping_time = <%= @opers_ping_time %>;
  number_per_ip = <%= @opers_number_per_ip %>;
  max_number = <%= @opers_max_number %>;
  sendq = <%= @opers_sendq %>;
};

class "server" {
  ping_time = <%= @server_ping_time %>;
  connectfreq = <%= @server_connectfreq %>;
  max_number = <%= @server_max_number %>;
  sendq = <%= @server_sendq %>;
};

listen {
	/* If you want to listen on a specific IP only, specify host.
	 * host definitions apply only to the following port line.
	 */

  host = <%= @listen_host %>;
  port = <%= @listen_port %>;
  sslport = <%= @listen_sslport %>;

	/* Listen on IPv6 (if you used host= above). */
  host = <%= @listen_ipv6_host %>;
  #port = <%= @listen_ipv6_port %>;
  #sslport = <%= @listen_ipv6_sslport %>;
};

/* auth {}: allow users to connect to the ircd (OLD I:)
 * auth {} blocks MUST be specified in order of precedence.  The first one
 * that matches a user will be used.  So place spoofs first, then specials,
 * then general access, then restricted.
 */
auth {
	/* user: the user@ host allowed to connect.  Multiple IPv4/IPv6 user
	 * lines are permitted per auth block.  This is matched against the
	 * hostname and IP address (using :: shortening for IPv6 and
	 * prepending a 0 if it starts with a colon) and can also use CIDR
	 * masks.
	 */

    <% @opers_auth_users.each do |oper_auth_user| -%>
      user = <%= oper_auth_user %>
    <% end -%>

	/* password: an optional password that is required to use this block.
	 * By default this is not encrypted, specify the flag "encrypted" in
	 * flags = ...; below if it is.
	 */

   password = <%= @opers_password %>;

	/* opers: fake the users user @ host to be be this.  You may either
	 * specify a host or a user @ host to opers to.  This is free-form,
	 * just do everyone a favour and dont abuse it. (OLD I: = flag)
	 */

   spoof = <%= @opers_spoof %>;

	/* Possible flags in auth:
	 *
	 * encrypted                  | password is encrypted with mkpasswd
	 * opers_notice               | give a notice when opersing hosts
	 * exceed_limit (old > flag)  | allow user to exceed class user limits
	 * kline_exempt (old ^ flag)  | exempt this user from k/g/xlines&dnsbls
	 * dnsbl_exempt		      | exempt this user from dnsbls
	 * spambot_exempt	      | exempt this user from spambot checks
	 * shide_exempt		      | exempt this user from serverhiding
	 * jupe_exempt                | exempt this user from generating
	 *                              warnings joining juped channels
	 * resv_exempt		      | exempt this user from resvs
         * flood_exempt               | exempt this user from flood limits
         *                                     USE WITH CAUTION.
	 * no_tilde     (old - flag)  | don't prefix ~ to username if no ident
	 * need_ident   (old + flag)  | require ident for user in this class
	 * need_ssl                   | require SSL/TLS for user in this class
	 * need_sasl                  | require SASL id for user in this class
	 */

  <% @opers_flags.each do |oper_flag|
    #x='exceed_limit'; if flags.index(x) == flags.count.to_i - 1; puts x+';' else puts x+',' end
    #if flag is last in array, terminate with semicolon. else, needs a comma.
    if @opers_flags.index(oper_flag) == @opers_flags.count.to_i - 1;
      oper_flag = oper_flag + ';'
    else
      oper_flag = oper_flag + ','
    end
  -%>

	/* flags = kline_exempt, exceed_limit; */
  flags = <%= oper_flag %>

<% end -%>

	/* class: the class the user is placed in */
  #class = <%= @opers_auth_class %>; %>

  class = "opers";
};

auth {
	user = "*@*";
	class = "users";
};

/* privset {} blocks MUST be specified before anything that uses them.  That
 * means they must be defined before operator {}.
 */
privset "local_op" {
	privs = oper:local_kill, oper:operwall;
};

<% #TODO: make privset attributes %>

privset "server_bot" {
	extends = "local_op";
	privs = oper:kline, oper:remoteban, snomask:nick_changes;
};

privset "global_op" {
	extends = "local_op";
	privs = oper:global_kill, oper:routing, oper:kline, oper:unkline, oper:xline,
		oper:resv, oper:mass_notice, oper:remoteban;
};

privset "admin" {
	extends = "global_op";
	privs = oper:admin, oper:die, oper:rehash, oper:spy;
};

operator "<%= @god_op_name %>"
/* operator "god" { */
	/* name: the name of the oper must go above */

	/* user: the user @ host required for this operator.  CIDR *is*
	 * supported now. auth{} spoofs work here, other spoofs do not.
 	 * multiple user="" lines are supported.
   */

  user = "<%= @god_op_userhost %>";

	/* password: the password required to oper.  Unless ~encrypted is
	 * contained in flags = ...; this will need to be encrypted using
	 * mkpasswd, MD5 is supported
	 */

  password = "<%= @god_op_password %>";

	/* rsa key: the public key for this oper when using Challenge.
	 * A password should not be defined when this is used, see
	 * doc/challenge.txt for more information.
	 */
  #rsa_public_key_file = "<%= @god_op_rsa_public_key_file %>";

	/* umodes: the specific umodes this oper gets when they oper.
	 * If this is specified an oper will not be given oper_umodes
	 * These are described above oper_only_umodes in general {};
	 */
	#umodes = locops, servnotice, operwall, wallop;

  <% @god_op_umodes.each do |god_op_umode|
    #x='exceed_limit'; if god_op_umodes.index(x) == god_op_umodes.count.to_i - 1; puts x+';' else puts x+',' end
    #if last in array, terminate with semicolon. else, needs a comma.
    if @god_op_umodes.index(god_op_umode) == @god_op_umodes.count.to_i - 1;
      god_op_umode = god_op_umode + ';'
    else
      god_op_umode = god_op_umode + ','
    end
  -%>
      god_op_umodes = <%= god_op_umode %>
  <% end -%>



	/* fingerprint: if specified, the oper's client certificate
	 * fingerprint will be checked against the specified fingerprint
	 * below.
	 */
	#fingerprint = "c77106576abf7f9f90cca0f63874a60f2e40a64b";
	#fingerprint = "<%= @god_op_fingerprint %>";

	/* snomask: specific server notice mask on oper up.
	 * If this is specified an oper will not be given oper_snomask.
	 */
  snomask = "<%= @god_op_snomask %>";

	/* flags: misc options for the operator.  You may prefix an option
	 * with ~ to disable it, e.g. ~encrypted.
	 *
	 * Default flags are encrypted.
	 *
	 * Available options:
	 *
	 * encrypted:    the password above is encrypted [DEFAULT]
	 * need_ssl:     must be using SSL/TLS to oper up
         */
	flags = encrypted;

	/* privset: privileges set to grant */
	privset = "admin";
};

#connect "irc.uplink.com" {
#	host = "192.168.0.1";
#	send_password = "password";
#	accept_password = "anotherpassword";
#	port = 6666;
#	hub_mask = "*";
#	class = "server";
#	flags = compressed, topicburst;
#
#	/* If the connection is IPv6, uncomment below.
#	 * Use 0::1, not ::1, for IPv6 localhost. */
#	#aftype = ipv6;
#};
#
#connect "ssl.uplink.com" {
#	host = "192.168.0.1";
#	send_password = "password";
#	accept_password = "anotherpassword";
#	port = 9999;
#	hub_mask = "*";
#	class = "server";
#	flags = ssl, topicburst;
#};

service {
	name = "services.int";
};

cluster {
	name = "*";
	flags = kline, tkline, unkline, xline, txline, unxline, resv, tresv, unresv;
};

shared {
	oper = "*@*", "*";
	flags = all, rehash;
};

/* exempt {}: IPs that are exempt from Dlines and rejectcache. (OLD d:) */
exempt {
	ip = "127.0.0.1";
};

channel {
  <%= #https://code.netsoc.tcd.ie/projects/1/wiki/Hybrid-IRCD
  #TODO: decide if this is worth parameterizing...

  %>
	use_invex = yes;
	use_except = yes;
	use_knock = yes;
	use_forward = yes;
	knock_delay = 5 minutes;
	knock_delay_channel = 1 minute;
	max_chans_per_user = 15;
        max_bans = 100;
        max_bans_large = 500;
	default_split_user_count = 0;
	default_split_server_count = 0;
	no_create_on_split = no;
	no_join_on_split = no;
	burst_topicwho = yes;
	kick_on_split_riding = no;
	only_ascii_channels = no;
	resv_forcepart = yes;
	channel_target_change = yes;
};

serverhide {
	flatten_links = yes;
	links_delay = 5 minutes;
        hidden = no;
	disable_hidden = no;
};

/* These are the blacklist settings.
 * You can have multiple combinations of host and rejection reasons.
 * They are used in pairs of one host/rejection reason.
 *
 * These settings should be adequate for most networks, and are (presently)
 * required for use on AthemeNet.
 *
 * Word to the wise: Do not use blacklists like SPEWS for blocking IRC
 * connections.
 *
 * As of charybdis 2.1.3, you can do some keyword substitution on the rejection
 * reason. The available keyword substitutions are:
 *
 *   ${ip}           - the user's IP
 *   ${host}         - the user's canonical hostname
 *   ${dnsbl-host}   - the dnsbl hostname the lookup was done against
 *   ${nick}         - the user's nickname
 *   ${network-name} - the name of the network
 *
 * Note: AHBL (the providers of the below *.ahbl.org BLs) request that they be
 * contacted, via email, at admins@2mbit.com before using these BLs.
 * See <http://www.ahbl.org/services.php> for more information.
 */
blacklist {
	host = "rbl.efnetrbl.org";
	reject_reason = "${nick}, your IP (${ip}) is listed in EFnet's RBL. For assistance, see http://efnetrbl.org/?i=${ip}";

#	host = "ircbl.ahbl.org";
#	reject_reason = "${nick}, your IP (${ip}) is listed in ${dnsbl-host} for having an open proxy. In order to protect ${network-name} from abuse, we are not allowing connections with open proxies to connect.";
#
#	host = "tor.ahbl.org";
#	reject_reason = "${nick}, your IP (${ip}) is listed as a TOR exit node. In order to protect ${network-name} from tor-based abuse, we are not allowing TOR exit nodes to connect to our network.";
};

alias "NickServ" {
	target = "NickServ";
};

alias "ChanServ" {
	target = "ChanServ";
};

alias "OperServ" {
	target = "OperServ";
};

alias "MemoServ" {
	target = "MemoServ";
};

alias "NS" {
	target = "NickServ";
};

alias "CS" {
	target = "ChanServ";
};

alias "OS" {
	target = "OperServ";
};

alias "MS" {
	target = "MemoServ";
};

general {
	hide_error_messages = opers;
	hide_spoof_ips = yes;

	/*
	 * default_umodes: umodes to enable on connect.
	 * If you have enabled the new ip_cloaking_4.0 module, and you want
	 * to make use of it, add +x to this option, i.e.:
	 *      default_umodes = "+ix";
	 *
	 * If you have enabled the old ip_cloaking module, and you want
	 * to make use of it, add +h to this option, i.e.:
	 *	default_umodes = "+ih";
	 * default_umodes = "+i";
  */
  default_umodes = <%= @default_umodes %>

	default_operstring = "is an IRC Operator";
	default_adminstring = "is a Server Administrator";
	servicestring = "is a Network Service";
	disable_fake_channels = no;
        tkline_expire_notices = no;
        default_floodcount = 10;
	failed_oper_notice = yes;
	dots_in_ident=2;
	min_nonwildcard = 4;
	min_nonwildcard_simple = 3;
        max_accept = 100;
	max_monitor = 100;
	anti_nick_flood = yes;
	max_nick_time = 20 seconds;
	max_nick_changes = 5;
        anti_spam_exit_message_time = 5 minutes;
	ts_warn_delta = 30 seconds;
	ts_max_delta = 5 minutes;
	client_exit = yes;
	collision_fnc = yes;
	global_snotices = yes;
	dline_with_reason = yes;
	kline_delay = 0 seconds;
	kline_with_reason = yes;
	kline_reason = "K-Lined";
	identify_service = "NickServ@services.int";
	identify_command = "IDENTIFY";
	non_redundant_klines = yes;
	warn_no_nline = yes;
	use_propagated_bans = yes;
	stats_e_disabled = no;
	stats_c_oper_only=no;
	stats_h_oper_only=no;
	stats_y_oper_only=no;
	stats_o_oper_only=yes;
	stats_P_oper_only=no;
	stats_i_oper_only=masked;
	stats_k_oper_only=masked;
        map_oper_only = no;
	operspy_admin_only = no;
	operspy_dont_care_user_info = no;
	caller_id_wait = 1 minute;
	pace_wait_simple = 1 second;
	pace_wait = 10 seconds;
	short_motd = no;
	ping_cookie = no;
	connect_timeout = 30 seconds;
	default_ident_timeout = 5;
	disable_auth = no;
	no_oper_flood = yes;
	max_targets = 4;
	client_flood = 20;
        use_whois_actually = no;
	oper_only_umodes = operwall, locops, servnotice;
	oper_umodes = locops, servnotice, operwall, wallop;
	oper_snomask = "+s";
        burst_away = yes;
	nick_delay = 0 seconds; # 15 minutes if you want to enable this
	reject_ban_time = 1 minute;
	reject_after_count = 3;
	reject_duration = 5 minutes;
	throttle_duration = 60;
	throttle_count = 4;
};

modules {
	path = "modules";
	path = "modules/autoload";
};
